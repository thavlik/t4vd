// Code generated by oto; DO NOT EDIT.

package api

import (
	"context"
	"log"
	"net/http"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"

	"github.com/pacedotdev/oto/otohttp"
)

var (
	filterClassifyTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "filter_classify_total",
		Help: "Auto-generated metric incremented on every call to Filter.Classify",
	})
	filterClassifySuccessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "filter_classify_success_total",
		Help: "Auto-generated metric incremented on every call to Filter.Classify that does not return with an error",
	})
)

type Filter interface {
	Classify(context.Context, Classify) (*Void, error)
}

type filterServer struct {
	server *otohttp.Server
	filter Filter
}

func RegisterFilter(server *otohttp.Server, filter Filter) {
	handler := &filterServer{
		server: server,
		filter: filter,
	}
	server.Register("Filter", "Classify", handler.handleClassify)
}

func (s *filterServer) handleClassify(w http.ResponseWriter, r *http.Request) {
	filterClassifyTotal.Inc()
	var request Classify
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.filter.Classify(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	filterClassifySuccessTotal.Inc()
}

type Marker struct {
	VideoID string `json:"videoID"`
	Time    int64  `json:"time"`
}

type Classify struct {
	ProjectID string `json:"projectID"`
	Marker    Marker `json:"marker"`
	Label     int64  `json:"label"`
}

type Void struct {
	Error string `json:"error,omitempty"`
}
