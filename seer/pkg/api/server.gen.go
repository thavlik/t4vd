// Code generated by oto; DO NOT EDIT.

package api

import (
	"context"
	"log"
	"net/http"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"

	"github.com/pacedotdev/oto/otohttp"
)

var (
	seerBulkScheduleVideoDownloadsTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_bulk_schedule_video_downloads_total",
		Help: "Auto-generated metric incremented on every call to Seer.BulkScheduleVideoDownloads",
	})
	seerBulkScheduleVideoDownloadsSuccessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_bulk_schedule_video_downloads_success_total",
		Help: "Auto-generated metric incremented on every call to Seer.BulkScheduleVideoDownloads that does not return with an error",
	})

	seerCancelVideoDownloadTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_cancel_video_download_total",
		Help: "Auto-generated metric incremented on every call to Seer.CancelVideoDownload",
	})
	seerCancelVideoDownloadSuccessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_cancel_video_download_success_total",
		Help: "Auto-generated metric incremented on every call to Seer.CancelVideoDownload that does not return with an error",
	})

	seerGetBulkChannelsDetailsTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_get_bulk_channels_details_total",
		Help: "Auto-generated metric incremented on every call to Seer.GetBulkChannelsDetails",
	})
	seerGetBulkChannelsDetailsSuccessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_get_bulk_channels_details_success_total",
		Help: "Auto-generated metric incremented on every call to Seer.GetBulkChannelsDetails that does not return with an error",
	})

	seerGetBulkPlaylistsDetailsTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_get_bulk_playlists_details_total",
		Help: "Auto-generated metric incremented on every call to Seer.GetBulkPlaylistsDetails",
	})
	seerGetBulkPlaylistsDetailsSuccessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_get_bulk_playlists_details_success_total",
		Help: "Auto-generated metric incremented on every call to Seer.GetBulkPlaylistsDetails that does not return with an error",
	})

	seerGetBulkVideosDetailsTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_get_bulk_videos_details_total",
		Help: "Auto-generated metric incremented on every call to Seer.GetBulkVideosDetails",
	})
	seerGetBulkVideosDetailsSuccessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_get_bulk_videos_details_success_total",
		Help: "Auto-generated metric incremented on every call to Seer.GetBulkVideosDetails that does not return with an error",
	})

	seerGetChannelDetailsTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_get_channel_details_total",
		Help: "Auto-generated metric incremented on every call to Seer.GetChannelDetails",
	})
	seerGetChannelDetailsSuccessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_get_channel_details_success_total",
		Help: "Auto-generated metric incremented on every call to Seer.GetChannelDetails that does not return with an error",
	})

	seerGetChannelVideoIDsTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_get_channel_video_ids_total",
		Help: "Auto-generated metric incremented on every call to Seer.GetChannelVideoIDs",
	})
	seerGetChannelVideoIDsSuccessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_get_channel_video_ids_success_total",
		Help: "Auto-generated metric incremented on every call to Seer.GetChannelVideoIDs that does not return with an error",
	})

	seerGetPlaylistDetailsTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_get_playlist_details_total",
		Help: "Auto-generated metric incremented on every call to Seer.GetPlaylistDetails",
	})
	seerGetPlaylistDetailsSuccessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_get_playlist_details_success_total",
		Help: "Auto-generated metric incremented on every call to Seer.GetPlaylistDetails that does not return with an error",
	})

	seerGetPlaylistVideoIDsTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_get_playlist_video_ids_total",
		Help: "Auto-generated metric incremented on every call to Seer.GetPlaylistVideoIDs",
	})
	seerGetPlaylistVideoIDsSuccessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_get_playlist_video_ids_success_total",
		Help: "Auto-generated metric incremented on every call to Seer.GetPlaylistVideoIDs that does not return with an error",
	})

	seerGetVideoDetailsTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_get_video_details_total",
		Help: "Auto-generated metric incremented on every call to Seer.GetVideoDetails",
	})
	seerGetVideoDetailsSuccessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_get_video_details_success_total",
		Help: "Auto-generated metric incremented on every call to Seer.GetVideoDetails that does not return with an error",
	})

	seerListCacheTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_list_cache_total",
		Help: "Auto-generated metric incremented on every call to Seer.ListCache",
	})
	seerListCacheSuccessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_list_cache_success_total",
		Help: "Auto-generated metric incremented on every call to Seer.ListCache that does not return with an error",
	})

	seerListVideoDownloadsTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_list_video_downloads_total",
		Help: "Auto-generated metric incremented on every call to Seer.ListVideoDownloads",
	})
	seerListVideoDownloadsSuccessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_list_video_downloads_success_total",
		Help: "Auto-generated metric incremented on every call to Seer.ListVideoDownloads that does not return with an error",
	})

	seerPurgeVideoTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_purge_video_total",
		Help: "Auto-generated metric incremented on every call to Seer.PurgeVideo",
	})
	seerPurgeVideoSuccessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_purge_video_success_total",
		Help: "Auto-generated metric incremented on every call to Seer.PurgeVideo that does not return with an error",
	})

	seerScheduleVideoDownloadTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_schedule_video_download_total",
		Help: "Auto-generated metric incremented on every call to Seer.ScheduleVideoDownload",
	})
	seerScheduleVideoDownloadSuccessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "seer_schedule_video_download_success_total",
		Help: "Auto-generated metric incremented on every call to Seer.ScheduleVideoDownload that does not return with an error",
	})
)

type Seer interface {
	BulkScheduleVideoDownloads(context.Context, BulkScheduleVideoDownloads) (*Void, error)
	CancelVideoDownload(context.Context, CancelVideoDownload) (*Void, error)
	GetBulkChannelsDetails(context.Context, GetBulkChannelsDetailsRequest) (*GetBulkChannelsDetailsResponse, error)
	GetBulkPlaylistsDetails(context.Context, GetBulkPlaylistsDetailsRequest) (*GetBulkPlaylistsDetailsResponse, error)
	GetBulkVideosDetails(context.Context, GetBulkVideosDetailsRequest) (*GetBulkVideosDetailsResponse, error)
	GetChannelDetails(context.Context, GetChannelDetailsRequest) (*GetChannelDetailsResponse, error)
	GetChannelVideoIDs(context.Context, GetChannelVideoIDsRequest) (*GetChannelVideoIDsResponse, error)
	GetPlaylistDetails(context.Context, GetPlaylistDetailsRequest) (*GetPlaylistDetailsResponse, error)
	GetPlaylistVideoIDs(context.Context, GetPlaylistVideoIDsRequest) (*GetPlaylistVideoIDsResponse, error)
	GetVideoDetails(context.Context, GetVideoDetailsRequest) (*GetVideoDetailsResponse, error)
	ListCache(context.Context, ListCacheRequest) (*ListCacheResponse, error)
	ListVideoDownloads(context.Context, Void) (*VideoDownloads, error)
	PurgeVideo(context.Context, PurgeVideo) (*Void, error)
	ScheduleVideoDownload(context.Context, ScheduleVideoDownload) (*Void, error)
}

type seerServer struct {
	server *otohttp.Server
	seer   Seer
}

func RegisterSeer(server *otohttp.Server, seer Seer) {
	handler := &seerServer{
		server: server,
		seer:   seer,
	}
	server.Register("Seer", "BulkScheduleVideoDownloads", handler.handleBulkScheduleVideoDownloads)
	server.Register("Seer", "CancelVideoDownload", handler.handleCancelVideoDownload)
	server.Register("Seer", "GetBulkChannelsDetails", handler.handleGetBulkChannelsDetails)
	server.Register("Seer", "GetBulkPlaylistsDetails", handler.handleGetBulkPlaylistsDetails)
	server.Register("Seer", "GetBulkVideosDetails", handler.handleGetBulkVideosDetails)
	server.Register("Seer", "GetChannelDetails", handler.handleGetChannelDetails)
	server.Register("Seer", "GetChannelVideoIDs", handler.handleGetChannelVideoIDs)
	server.Register("Seer", "GetPlaylistDetails", handler.handleGetPlaylistDetails)
	server.Register("Seer", "GetPlaylistVideoIDs", handler.handleGetPlaylistVideoIDs)
	server.Register("Seer", "GetVideoDetails", handler.handleGetVideoDetails)
	server.Register("Seer", "ListCache", handler.handleListCache)
	server.Register("Seer", "ListVideoDownloads", handler.handleListVideoDownloads)
	server.Register("Seer", "PurgeVideo", handler.handlePurgeVideo)
	server.Register("Seer", "ScheduleVideoDownload", handler.handleScheduleVideoDownload)
}

func (s *seerServer) handleBulkScheduleVideoDownloads(w http.ResponseWriter, r *http.Request) {
	seerBulkScheduleVideoDownloadsTotal.Inc()
	var request BulkScheduleVideoDownloads
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.seer.BulkScheduleVideoDownloads(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	seerBulkScheduleVideoDownloadsSuccessTotal.Inc()
}

func (s *seerServer) handleCancelVideoDownload(w http.ResponseWriter, r *http.Request) {
	seerCancelVideoDownloadTotal.Inc()
	var request CancelVideoDownload
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.seer.CancelVideoDownload(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	seerCancelVideoDownloadSuccessTotal.Inc()
}

func (s *seerServer) handleGetBulkChannelsDetails(w http.ResponseWriter, r *http.Request) {
	seerGetBulkChannelsDetailsTotal.Inc()
	var request GetBulkChannelsDetailsRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.seer.GetBulkChannelsDetails(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	seerGetBulkChannelsDetailsSuccessTotal.Inc()
}

func (s *seerServer) handleGetBulkPlaylistsDetails(w http.ResponseWriter, r *http.Request) {
	seerGetBulkPlaylistsDetailsTotal.Inc()
	var request GetBulkPlaylistsDetailsRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.seer.GetBulkPlaylistsDetails(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	seerGetBulkPlaylistsDetailsSuccessTotal.Inc()
}

func (s *seerServer) handleGetBulkVideosDetails(w http.ResponseWriter, r *http.Request) {
	seerGetBulkVideosDetailsTotal.Inc()
	var request GetBulkVideosDetailsRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.seer.GetBulkVideosDetails(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	seerGetBulkVideosDetailsSuccessTotal.Inc()
}

func (s *seerServer) handleGetChannelDetails(w http.ResponseWriter, r *http.Request) {
	seerGetChannelDetailsTotal.Inc()
	var request GetChannelDetailsRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.seer.GetChannelDetails(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	seerGetChannelDetailsSuccessTotal.Inc()
}

func (s *seerServer) handleGetChannelVideoIDs(w http.ResponseWriter, r *http.Request) {
	seerGetChannelVideoIDsTotal.Inc()
	var request GetChannelVideoIDsRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.seer.GetChannelVideoIDs(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	seerGetChannelVideoIDsSuccessTotal.Inc()
}

func (s *seerServer) handleGetPlaylistDetails(w http.ResponseWriter, r *http.Request) {
	seerGetPlaylistDetailsTotal.Inc()
	var request GetPlaylistDetailsRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.seer.GetPlaylistDetails(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	seerGetPlaylistDetailsSuccessTotal.Inc()
}

func (s *seerServer) handleGetPlaylistVideoIDs(w http.ResponseWriter, r *http.Request) {
	seerGetPlaylistVideoIDsTotal.Inc()
	var request GetPlaylistVideoIDsRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.seer.GetPlaylistVideoIDs(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	seerGetPlaylistVideoIDsSuccessTotal.Inc()
}

func (s *seerServer) handleGetVideoDetails(w http.ResponseWriter, r *http.Request) {
	seerGetVideoDetailsTotal.Inc()
	var request GetVideoDetailsRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.seer.GetVideoDetails(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	seerGetVideoDetailsSuccessTotal.Inc()
}

func (s *seerServer) handleListCache(w http.ResponseWriter, r *http.Request) {
	seerListCacheTotal.Inc()
	var request ListCacheRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.seer.ListCache(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	seerListCacheSuccessTotal.Inc()
}

func (s *seerServer) handleListVideoDownloads(w http.ResponseWriter, r *http.Request) {
	seerListVideoDownloadsTotal.Inc()
	var request Void
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.seer.ListVideoDownloads(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	seerListVideoDownloadsSuccessTotal.Inc()
}

func (s *seerServer) handlePurgeVideo(w http.ResponseWriter, r *http.Request) {
	seerPurgeVideoTotal.Inc()
	var request PurgeVideo
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.seer.PurgeVideo(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	seerPurgeVideoSuccessTotal.Inc()
}

func (s *seerServer) handleScheduleVideoDownload(w http.ResponseWriter, r *http.Request) {
	seerScheduleVideoDownloadTotal.Inc()
	var request ScheduleVideoDownload
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.seer.ScheduleVideoDownload(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	seerScheduleVideoDownloadSuccessTotal.Inc()
}

type BulkScheduleVideoDownloads struct {
	VideoIDs []string `json:"videoIDs"`
}

type CancelVideoDownload struct {
	VideoID string `json:"videoID"`
}

type ChannelDetails struct {
	ID     string `json:"id"`
	Name   string `json:"name"`
	Avatar string `json:"avatar"`
	Subs   string `json:"subs"`
}

type GetBulkChannelsDetailsRequest struct {
	ChannelIDs []string `json:"channelIDs"`
}

type GetBulkChannelsDetailsResponse struct {
	Channels []*ChannelDetails `json:"channels"`
	Error    string            `json:"error,omitempty"`
}

type GetBulkPlaylistsDetailsRequest struct {
	PlaylistIDs []string `json:"playlistIDs"`
}

type GetBulkPlaylistsDetailsResponse struct {
	Playlists []*PlaylistDetails `json:"playlists"`
	Error     string             `json:"error,omitempty"`
}

type GetBulkVideosDetailsRequest struct {
	VideoIDs []string `json:"videoIDs"`
}

type GetBulkVideosDetailsResponse struct {
	Videos []*VideoDetails `json:"videos"`
	Error  string          `json:"error,omitempty"`
}

type GetChannelDetailsRequest struct {
	Input string `json:"input"`
	Force bool   `json:"force"`
}

type GetChannelDetailsResponse struct {
	Details ChannelDetails `json:"details"`
	Error   string         `json:"error,omitempty"`
}

type GetChannelVideoIDsRequest struct {
	ID string `json:"id"`
}

type GetChannelVideoIDsResponse struct {
	VideoIDs []string `json:"videoIDs"`
	Error    string   `json:"error,omitempty"`
}

type GetPlaylistDetailsRequest struct {
	Input string `json:"input"`
	Force bool   `json:"force"`
}

type PlaylistDetails struct {
	ID        string `json:"id"`
	Title     string `json:"title"`
	Channel   string `json:"channel"`
	ChannelID string `json:"channelID"`
	NumVideos int    `json:"numVideos"`
}

type GetPlaylistDetailsResponse struct {
	Details PlaylistDetails `json:"details"`
	Error   string          `json:"error,omitempty"`
}

type GetPlaylistVideoIDsRequest struct {
	ID string `json:"id"`
}

type GetPlaylistVideoIDsResponse struct {
	VideoIDs []string `json:"videoIDs"`
	Error    string   `json:"error,omitempty"`
}

type GetVideoDetailsRequest struct {
	Input string `json:"input"`
	Force bool   `json:"force"`
}

type VideoDetails struct {
	ID          string `json:"id"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Thumbnail   string `json:"thumbnail"`
	UploadDate  string `json:"uploadDate"`
	Uploader    string `json:"uploader"`
	UploaderID  string `json:"uploaderID"`
	Channel     string `json:"channel"`
	ChannelID   string `json:"channelID"`
	Duration    int64  `json:"duration"`
	ViewCount   int64  `json:"viewCount"`
	Width       int    `json:"width"`
	Height      int    `json:"height"`
	FPS         int    `json:"fPS"`
}

type GetVideoDetailsResponse struct {
	Details VideoDetails `json:"details"`
	Error   string       `json:"error,omitempty"`
}

type ListCacheRequest struct {
	Marker string `json:"marker"`
}

type ListCacheResponse struct {
	VideoIDs    []string `json:"videoIDs"`
	IsTruncated bool     `json:"isTruncated"`
	NextMarker  string   `json:"nextMarker"`
	Error       string   `json:"error,omitempty"`
}

type PurgeVideo struct {
	ID string `json:"id"`
}

type ScheduleVideoDownload struct {
	VideoID string `json:"videoID"`
}

type Void struct {
	Error string `json:"error,omitempty"`
}

type VideoDownloads struct {
	VideoIDs []string `json:"videoIDs"`
	Error    string   `json:"error,omitempty"`
}
